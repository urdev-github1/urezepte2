Verzeichnisstruktur des lib-Ordners:

└── generated/
└── models/
    ├── recipe_detail.dart
    └── recipe.dart
└── screens/
    ├── about_screen.dart
    ├── main_screen.dart
    └── recipe_detail_screen.dart
└── services/
    └── spoonacular_service.dart
└── widgets/
    └── custom_marker_icon.dart
└── main.dart


================================================================================

Dateiinhalte:

// ==== lib\models\recipe_detail.dart ====

// lib/models/recipe_detail.dart

class Ingredient {
  final int id;
  final String name;
  final String? image;
  final double amount;
  final String unit;

  Ingredient({
    required this.id,
    required this.name,
    this.image,
    required this.amount,
    required this.unit,
  });

  factory Ingredient.fromJson(Map<String, dynamic> json) {
    return Ingredient(
      id: json['id'] as int,
      name: json['name'] as String,
      image: json['image'] as String?,
      amount: (json['amount'] as num).toDouble(),
      unit: json['unit'] as String,
    );
  }
}

class InstructionStep {
  final int number;
  final String step;

  InstructionStep({required this.number, required this.step});

  factory InstructionStep.fromJson(Map<String, dynamic> json) {
    return InstructionStep(
      number: json['number'] as int,
      step: json['step'] as String,
    );
  }
}

class AnalyzedInstruction {
  final String name;
  final List<InstructionStep> steps;

  AnalyzedInstruction({required this.name, required this.steps});

  factory AnalyzedInstruction.fromJson(Map<String, dynamic> json) {
    return AnalyzedInstruction(
      name: json['name'] as String? ?? '', // Kann leer sein
      steps: (json['steps'] as List<dynamic>)
          .map((stepJson) => InstructionStep.fromJson(stepJson))
          .toList(),
    );
  }
}

class RecipeDetail {
  final int id;
  final String title;
  final String? image;
  final int? servings;
  final int? readyInMinutes;
  final String? sourceUrl;
  final String? summary;
  final List<Ingredient> extendedIngredients;
  final List<AnalyzedInstruction> analyzedInstructions;

  RecipeDetail({
    required this.id,
    required this.title,
    this.image,
    this.servings,
    this.readyInMinutes,
    this.sourceUrl,
    this.summary,
    required this.extendedIngredients,
    required this.analyzedInstructions,
  });

  factory RecipeDetail.fromJson(Map<String, dynamic> json) {
    var ingredientsList = json['extendedIngredients'] as List<dynamic>?;
    List<Ingredient> ingredients = ingredientsList != null
        ? ingredientsList.map((i) => Ingredient.fromJson(i)).toList()
        : [];

    var instructionsList = json['analyzedInstructions'] as List<dynamic>?;
    List<AnalyzedInstruction> instructions = instructionsList != null
        ? instructionsList.map((i) => AnalyzedInstruction.fromJson(i)).toList()
        : [];

    return RecipeDetail(
      id: json['id'] as int,
      title: json['title'] as String,
      image: json['image'] as String?,
      servings: json['servings'] as int?,
      readyInMinutes: json['readyInMinutes'] as int?,
      sourceUrl: json['sourceUrl'] as String?,
      summary: json['summary'] as String?,
      extendedIngredients: ingredients,
      analyzedInstructions: instructions,
    );
  }
}


// ==== lib\models\recipe.dart ====

// lib/models/recipe.dart

class Recipe {
  final int id;
  final String title;
  final String? image; // Bild-URL ist optional

  Recipe({required this.id, required this.title, this.image});

  factory Recipe.fromJson(Map<String, dynamic> json) {
    return Recipe(
      id: json['id'] as int,
      title: json['title'] as String,
      image: json['image'] as String?,
    );
  }
}


// ==== lib\screens\about_screen.dart ====

// ==== lib\screens\about_screen.dart ====

import 'package:flutter/material.dart';
import 'package:package_info_plus/package_info_plus.dart';
import '../generated/build_info.dart'; // Import der BuildInfo

class AboutScreen extends StatefulWidget {
  const AboutScreen({super.key});

  @override
  State<AboutScreen> createState() => _AboutScreenState();
}

class _AboutScreenState extends State<AboutScreen> {
  PackageInfo? _packageInfo;

  @override
  void initState() {
    super.initState();
    _loadPackageInfo();
  }

  Future<void> _loadPackageInfo() async {
    final info = await PackageInfo.fromPlatform();
    setState(() {
      _packageInfo = info;
    });
  }

  Widget _buildSectionTitle(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.only(
        top: 24.0,
        bottom: 8.0,
        left: 16.0,
        right: 16.0,
      ),
      child: Text(
        title,
        style: Theme.of(
          context,
        ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Über die App'),
        backgroundColor: Colors.blueGrey,
        foregroundColor: Colors.white,
      ),
      body: _packageInfo == null
          ? const Center(child: CircularProgressIndicator())
          : ListView(
              children: [
                _buildSectionTitle(context, 'Über die App'),
                Card(
                  margin: const EdgeInsets.symmetric(
                    horizontal: 16.0,
                    vertical: 8.0,
                  ),
                  child: Column(
                    children: [
                      ListTile(
                        leading: const Icon(Icons.info_outline),
                        title: const Text('App-Version'),
                        subtitle: Text(
                          '${_packageInfo!.version}+${_packageInfo!.buildNumber}',
                        ),
                      ),
                      ListTile(
                        leading: const Icon(Icons.build_circle_outlined),
                        title: const Text('Build-Zeitpunkt'),
                        subtitle: const Text(BuildInfo.buildTimestamp),
                      ),
                    ],
                  ),
                ),
                // Hier könnten weitere Sektionen oder Informationen folgen
              ],
            ),
    );
  }
}


// ==== lib\screens\main_screen.dart ====

// lib\screens\main_screen.dart

import 'package:flutter/material.dart';
import '../services/spoonacular_service.dart';
import '../models/recipe.dart';
import '../screens/about_screen.dart'; // Import des AboutScreen
import 'recipe_detail_screen.dart'; // NEU: Import des Detail-Screens

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  final TextEditingController _searchController = TextEditingController();
  final SpoonacularService _spoonacularService = SpoonacularService();
  List<Recipe> _recipes = [];
  bool _isLoading = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _searchRecipes(String query) async {
    if (query.trim().isEmpty) {
      setState(() {
        _recipes = [];
        _errorMessage = 'Bitte gib einen Suchbegriff ein.';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final recipes = await _spoonacularService.searchRecipes(query);
      setState(() {
        _recipes = recipes;
        _isLoading = false;
        if (_recipes.isEmpty) {
          _errorMessage = 'Keine Rezepte für "${query}" gefunden.';
        }
      });
    } catch (e) {
      setState(() {
        _errorMessage = e.toString().contains("Exception: Netzwerkfehler")
            ? "Keine Internetverbindung oder API-Fehler."
            : e.toString();
        _isLoading = false;
      });
    }
  }

  /// Baut die Benutzeroberfläche des MainScreen auf.
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Rezeptsuche'),
        backgroundColor: Colors.blueGrey,
        foregroundColor: Colors.white,
        actions: [
          // Info-Button, der zum AboutScreen navigiert.
          IconButton(
            icon: const Icon(Icons.info_outline),
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(builder: (context) => const AboutScreen()),
              );
            },
            tooltip: 'Über die App',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Rezepte suchen (z.B. Pasta, Chicken)',
                suffixIcon: IconButton(
                  icon: const Icon(Icons.search),
                  onPressed: () => _searchRecipes(_searchController.text),
                ),
                border: const OutlineInputBorder(),
              ),
              onSubmitted: _searchRecipes,
            ),
            const SizedBox(height: 16.0),
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : _errorMessage != null
                ? Center(child: Text(_errorMessage!))
                : Expanded(
                    child:
                        _recipes.isEmpty &&
                            _searchController
                                .text
                                .isNotEmpty // Nur anzeigen, wenn keine Ergebnisse und bereits gesucht wurde
                        ? const Center(child: Text('Keine Rezepte gefunden.'))
                        : ListView.builder(
                            itemCount: _recipes.length,
                            itemBuilder: (context, index) {
                              final recipe = _recipes[index];
                              return Card(
                                margin: const EdgeInsets.symmetric(
                                  vertical: 8.0,
                                ),
                                child: ListTile(
                                  leading: recipe.image != null
                                      ? Image.network(
                                          recipe.image!,
                                          width: 50,
                                          height: 50,
                                          fit: BoxFit.cover,
                                          errorBuilder:
                                              (context, error, stackTrace) =>
                                                  const Icon(
                                                    Icons.broken_image,
                                                  ),
                                        )
                                      : const Icon(Icons.food_bank),
                                  title: Text(recipe.title),
                                  onTap: () {
                                    // HIER IST DIE KORREKTUR: Navigation zum RecipeDetailScreen
                                    Navigator.of(context).push(
                                      MaterialPageRoute(
                                        builder: (context) =>
                                            RecipeDetailScreen(
                                              recipeId: recipe.id,
                                            ),
                                      ),
                                    );
                                  },
                                ),
                              );
                            },
                          ),
                  ),
          ],
        ),
      ),
    );
  }
}


// ==== lib\screens\recipe_detail_screen.dart ====

// lib/screens/recipe_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart'; // Für die HTML-Anzeige der Zusammenfassung
import '../models/recipe_detail.dart';
import '../services/spoonacular_service.dart';

class RecipeDetailScreen extends StatefulWidget {
  final int recipeId;

  const RecipeDetailScreen({super.key, required this.recipeId});

  @override
  State<RecipeDetailScreen> createState() => _RecipeDetailScreenState();
}

class _RecipeDetailScreenState extends State<RecipeDetailScreen> {
  late Future<RecipeDetail> _recipeDetailFuture;

  @override
  void initState() {
    super.initState();
    _recipeDetailFuture = SpoonacularService().getRecipeDetails(
      widget.recipeId,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Rezeptdetails'),
        backgroundColor: Colors.blueGrey,
        foregroundColor: Colors.white,
      ),
      body: FutureBuilder<RecipeDetail>(
        future: _recipeDetailFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Fehler: ${snapshot.error}'));
          } else if (!snapshot.hasData) {
            return const Center(child: Text('Keine Rezeptdetails gefunden.'));
          } else {
            final recipe = snapshot.data!;
            return SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    recipe.title,
                    style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16.0),
                  if (recipe.image != null)
                    Center(
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(8.0),
                        child: Image.network(
                          recipe.image!,
                          height: 200,
                          width: double.infinity,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) =>
                              const Icon(Icons.broken_image, size: 100),
                        ),
                      ),
                    ),
                  const SizedBox(height: 16.0),
                  Wrap(
                    spacing: 8.0,
                    children: [
                      if (recipe.readyInMinutes != null)
                        Chip(
                          avatar: const Icon(Icons.timer),
                          label: Text('${recipe.readyInMinutes} Min.'),
                        ),
                      if (recipe.servings != null)
                        Chip(
                          avatar: const Icon(Icons.people),
                          label: Text('${recipe.servings} Portionen'),
                        ),
                    ],
                  ),
                  const SizedBox(height: 16.0),
                  if (recipe.summary != null && recipe.summary!.isNotEmpty)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Zusammenfassung',
                          style: Theme.of(context).textTheme.titleLarge,
                        ),
                        Html(data: recipe.summary!), // Anzeigen von HTML-Text
                        const SizedBox(height: 16.0),
                      ],
                    ),
                  if (recipe.extendedIngredients.isNotEmpty)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Zutaten',
                          style: Theme.of(context).textTheme.titleLarge,
                        ),
                        const SizedBox(height: 8.0),
                        ListView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount: recipe.extendedIngredients.length,
                          itemBuilder: (context, index) {
                            final ingredient =
                                recipe.extendedIngredients[index];
                            return Padding(
                              padding: const EdgeInsets.symmetric(
                                vertical: 4.0,
                              ),
                              child: Text(
                                '- ${ingredient.amount} ${ingredient.unit} ${ingredient.name}',
                              ),
                            );
                          },
                        ),
                        const SizedBox(height: 16.0),
                      ],
                    ),
                  if (recipe.analyzedInstructions.isNotEmpty)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Zubereitung',
                          style: Theme.of(context).textTheme.titleLarge,
                        ),
                        const SizedBox(height: 8.0),
                        ListView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount:
                              recipe.analyzedInstructions.first.steps.length,
                          itemBuilder: (context, index) {
                            final step =
                                recipe.analyzedInstructions.first.steps[index];
                            return Padding(
                              padding: const EdgeInsets.symmetric(
                                vertical: 4.0,
                              ),
                              child: Text('${step.number}. ${step.step}'),
                            );
                          },
                        ),
                        const SizedBox(height: 16.0),
                      ],
                    ),
                  if (recipe.sourceUrl != null && recipe.sourceUrl!.isNotEmpty)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Quelle',
                          style: Theme.of(context).textTheme.titleLarge,
                        ),
                        InkWell(
                          onTap: () {
                            // TODO: Implementiere das Öffnen der URL im Browser
                            // import 'package:url_launcher/url_launcher.dart';
                            // launchUrl(Uri.parse(recipe.sourceUrl!));
                          },
                          child: Text(
                            recipe.sourceUrl!,
                            style: const TextStyle(
                              color: Colors.blue,
                              decoration: TextDecoration.underline,
                            ),
                          ),
                        ),
                      ],
                    ),
                ],
              ),
            );
          }
        },
      ),
    );
  }
}


// ==== lib\services\spoonacular_service.dart ====

// lib/services/spoonacular_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/recipe.dart';
import '../models/recipe_detail.dart'; // Importiere das neue Detail-Modell

class SpoonacularService {
  static const String _baseUrl = 'https://api.spoonacular.com';
  final String _apiKey =
      '9959e7fc5e464f4ea3e43c2dfd4279a0'; // ERSETZE DIES DURCH DEINEN TATSÄCHLICHEN API-SCHLÜSSEL

  Future<List<Recipe>> searchRecipes(String query) async {
    final uri = Uri.parse(
      '$_baseUrl/recipes/complexSearch?query=$query&apiKey=$_apiKey&number=10',
    );

    try {
      final response = await http.get(uri);

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.body);
        final List<dynamic> results = data['results'];
        return results.map((json) => Recipe.fromJson(json)).toList();
      } else {
        throw Exception(
          'Fehler beim Laden der Rezepte: ${response.statusCode}',
        );
      }
    } catch (e) {
      throw Exception('Netzwerkfehler: $e');
    }
  }

  // NEUE METHODE: Rezeptdetails abrufen
  Future<RecipeDetail> getRecipeDetails(int id) async {
    final uri = Uri.parse(
      '$_baseUrl/recipes/$id/information?apiKey=$_apiKey&includeNutrition=false', // includeNutrition ist optional
    );

    try {
      final response = await http.get(uri);

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.body);
        return RecipeDetail.fromJson(data);
      } else {
        throw Exception(
          'Fehler beim Laden der Rezeptdetails: ${response.statusCode}',
        );
      }
    } catch (e) {
      throw Exception('Netzwerkfehler beim Abrufen der Details: $e');
    }
  }
}


// ==== lib\widgets\custom_marker_icon.dart ====

// lib/widgets/custom_marker_icon.dart

import 'package:flutter/material.dart';

/// Ein benutzerdefiniertes Widget, das als Marker-Icon auf der Karte dient.
class CustomMarkerIcon extends StatelessWidget {
  const CustomMarkerIcon({super.key});

  @override
  Widget build(BuildContext context) {
    //return const Icon(Icons.location_on, color: Colors.red, size: 40.0);
    return const Icon(Icons.push_pin, color: Colors.red, size: 40.0);
  }
}


// ==== lib\main.dart ====

// lib/main.dart

import 'package:flutter/material.dart';
import 'package:urezepte2/screens/main_screen.dart'; // Korrekter Import für MainScreen

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'uRezepte2', // Du kannst hier den Namen deiner App anpassen
      theme: ThemeData(
        primarySwatch: Colors.blueGrey, // Passend zu deiner App-Bar Farbe
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.blueGrey,
          foregroundColor: Colors.white,
        ),
        useMaterial3: true,
      ),
      home: const MainScreen(), // Der MainScreen ist der Startbildschirm
      debugShowCheckedModeBanner: false, // Optional: Entfernt das Debug-Banner
    );
  }
}

